log4j.rootLogger=DEBUG,stdout,R

##日志文件的名称（定义为控制台输出）
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
##灵活定义输出格式
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
##输出格式定义
log4j.appender.stdout.layout.ConversionPattern=[%t] %-5p %-20c{2} - %m %n 

##日志文件的名称（定义为文件输出）
log4j.appender.R=org.apache.log4j.RollingFileAppender
##日志文件路径
log4j.appender.R.File=D:/log/wenhan-uk.log
##
log4j.appender.R.ImmediateFlush=true
##日志文件的大小
log4j.appender.R.MaxFileSize=100KB
##
log4j.appender.R.MaxBackupIndex=1
##文件输出方式
log4j.appender.R.layout=org.apache.log4j.PatternLayout
##输出格式定义
log4j.appender.R.layout.ConversionPattern=%d{ABSOLUTE} [%t] %-5p %-30c{3} %x - %m %n


###################  配置根Logger  #####################
语法：  log4j.rootLogger = [ level ] , appenderName, appenderName …           
参数：  
       1、 level：         log4j级别，是日志记录的优先级。                                      
       2、 appenderName： 日志信息输出处，您可以同时指定多个输出目的地，可以是文件、控制台等。
例子：  log4j.rootLogger=DEBUG,R      DEBUG为级别     A1为输出地                                

#####################  log4j级别  ########################
级别：      
       FATAL  -  0    指出每个严重的错误事件将会导致应用程序的退出。
       ERROR  -  3    指出虽然发生错误事件，但仍然不影响系统的继续运行。
       WARN   -  4    表明会出现潜在错误的情形。
       INFO   -  6    表明消息在粗粒度级别上突出强调应用程序的运行过程。
       DEBUG  -  7    指出细粒度信息事件对调试应用程序是非常有帮助的。


###############################  appender  ###############################
类别：
       org.apache.log4j.ConsoleAppender                       （控制台）
       org.apache.log4j.FileAppender                          （文件）
       org.apache.log4j.DailyRollingFileAppender              （每天产生一个日志文件）
       org.apache.log4j.RollingFileAppender                   （文件大小到达指定尺寸的时候产生一个新的文件）
       org.apache.log4j.WriterAppender                      （将日志信息以流格式发送到任意指定的地方） 
例子：
       log4j.appender.A1=org.apache.log4j.ConsoleAppender   （指定A1的appender为控制台）
   
##############################  layout  ##################################
类别：
       org.apache.log4j.HTMLLayout                          （以HTML表格形式布局）
       org.apache.log4j.PatternLayout                       （可以灵活地指定布局模式）
       org.apache.log4j.SimpleLayout                        （包含日志信息的级别和信息字符串）
       org.apache.log4j.TTCCLayout                          （包含日志产生的时间、线程、类别等等信息）

########  配置log4j输出地appender  ####################
语法：

       log4j.appender.[appenderName] = appender class        （指定输出地所对应的class）
       log4j.appender.[appenderName].option1 = value1         （设定第一个参数）
                 参数包含文件路径、输出格式等等                     
       log4j.appender.[appenderName].optionN = valueN         （设定第N个参数）
例子：
       log4j.appender.stdout=
                       org.apache.log4j.ConsoleAppender         （指定stdout输出地为控制台）
       log4j.appender.stdout.layout=
                       org.apache.log4j.PatternLayout           （定义为灵活样式输出）
       log4j.appender.stdout.layout.ConversionPattern=
                       [%t] %-5p %-20c{2} - %m %n               （指定日志输出格式）
 
###################  定义灵活输出格式  ##########################      
参数：
       -X号:  X信息输出时左对齐；
       %p:    日志信息级别
       %d{}:  日志信息产生时间
       %c:    日志信息所在地（类名）
       %m:    产生的日志具体信息
       %n:    输出日志信息换行    

###################  其他设置  ##############################   
       
关于Log4j比较全面的配置
LOG4J的配置之简单使它遍及于越来越多的应用中了：Log4J配置文件实现了输出到控制台、文件、回滚文件、发送日志邮件、输出到数据库日志表、自定义标签等全套功能。择其一二使用就够用了， 

log4j.rootLogger=DEBUG,CONSOLE,A1,im 
log4j.addivity.org.apache=true 

 

# 应用于控制台 

log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender 
log4j.appender.Threshold=DEBUG 
log4j.appender.CONSOLE.Target=System.out 
log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout 
log4j.appender.CONSOLE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n 
#log4j.appender.CONSOLE.layout.ConversionPattern=[start]%d{DATE}[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[THREAD] n%c[CATEGORY]%n%m[MESSAGE]%n%n 


#应用于文件 

log4j.appender.FILE=org.apache.log4j.FileAppender 
log4j.appender.FILE.File=file.log 
log4j.appender.FILE.Append=false 
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout 
log4j.appender.FILE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n 
# Use this layout for LogFactor 5 analysis 

 

# 应用于文件回滚 

log4j.appender.ROLLING_FILE=org.apache.log4j.RollingFileAppender 
log4j.appender.ROLLING_FILE.Threshold=ERROR 
log4j.appender.ROLLING_FILE.File=rolling.log 
log4j.appender.ROLLING_FILE.Append=true 
log4j.appender.ROLLING_FILE.MaxFileSize=10KB 
log4j.appender.ROLLING_FILE.MaxBackupIndex=1 
log4j.appender.ROLLING_FILE.layout=org.apache.log4j.PatternLayout 
log4j.appender.ROLLING_FILE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n 


#应用于socket 
log4j.appender.SOCKET=org.apache.log4j.RollingFileAppender 
log4j.appender.SOCKET.RemoteHost=localhost 
log4j.appender.SOCKET.Port=5001 
log4j.appender.SOCKET.LocationInfo=true 
# Set up for Log Facter 5 
log4j.appender.SOCKET.layout=org.apache.log4j.PatternLayout 
log4j.appender.SOCET.layout.ConversionPattern=[start]%d{DATE}[DATE]%n%p[PRIORITY]%n%x[NDC]%n%t[THREAD]%n%c[CATEGORY]%n%m[MESSAGE]%n%n 


# Log Factor 5 Appender 
log4j.appender.LF5_APPENDER=org.apache.log4j.lf5.LF5Appender 
log4j.appender.LF5_APPENDER.MaxNumberOfRecords=2000 

 

# 发送日志给邮件 

log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender 
log4j.appender.MAIL.Threshold=FATAL 
log4j.appender.MAIL.BufferSize=10 
log4j.appender.MAIL.From=xxx@www.xxx.com 
log4j.appender.MAIL.SMTPHost=www.wusetu.com og4j.appender.MAIL.Subject=Log4J Message 
log4j.appender.MAIL.To=xxx@www.xxx.com 
log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout 
log4j.appender.MAIL.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n 

 

# 用于数据库 
log4j.appender.DATABASE=org.apache.log4j.jdbc.JDBCAppender 
log4j.appender.DATABASE.URL=jdbc:mysql://localhost:3306/test 
log4j.appender.DATABASE.driver=com.mysql.jdbc.Driver 
log4j.appender.DATABASE.user=root 
log4j.appender.DATABASE.password= 
log4j.appender.DATABASE.sql=INSERT INTO LOG4J (Message) VALUES ('[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n') 
log4j.appender.DATABASE.layout=org.apache.log4j.PatternLayout 
log4j.appender.DATABASE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n 


log4j.appender.A1=org.apache.log4j.DailyRollingFileAppender 
log4j.appender.A1.File=SampleMessages.log4j 
log4j.appender.A1.DatePattern=yyyyMMdd-HH'.log4j' 
log4j.appender.A1.layout=org.apache.log4j.xml.XMLLayout 


输出到2000NT日志
 把Log4j压缩包里的NTEventLogAppender.dll拷到WINNT\SYSTEM32目录下

 log4j.logger.NTlog=FATAL, A8
 # APPENDER A8
 log4j.appender.A8=org.apache.log4j.nt.NTEventLogAppender
 log4j.appender.A8.Source=JavaTest
 log4j.appender.A8.layout=org.apache.log4j.PatternLayout
 log4j.appender.A8.layout.ConversionPattern=%-4r %-5p [%t] %37c %3x - %m%n


#自定义Appender 

log4j.appender.im = net.cybercorlin.util.logger.appender.IMAppender 

log4j.appender.im.host = mail.cybercorlin.net 
log4j.appender.im.username = username 
log4j.appender.im.password = password 
log4j.appender.im.recipient = xxx@xxx.net 

log4j.appender.im.layout=org.apache.log4j.PatternLayout 
log4j.appender.im.layout.ConversionPattern =[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n

#####################################  end  ######################################      